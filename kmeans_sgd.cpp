#include "kmeans_sgd.h"
#include <iostream>
using std::clog; using std::endl;

void kMeansSGD::solve ( void ) {
   int size; MPI_Comm_size ( MPI_COMM_WORLD, &size );
   int rank; MPI_Comm_rank ( MPI_COMM_WORLD, &rank );

   // Parallelization: to improve the algorithm, we draw entries in batches. Each
   // process draws a portion of the batch and performs the algorithm
   // Since we don't want two processes to draw the same entry (waste of time and/or
   // possible conflicts) we have the random indexes generated by rank 0 in a
   // unique way, and then sent to the others

   // Size of each batch is in the member batchSize

   std::default_random_engine eng ( 1 );
   std::uniform_int_distribution<unsigned int> distro ( 0, dataset.size() - 1 );

   iter = 0;

   // Randomize initial assignments
   randomize();
   computeCentroids();

   int changes = stoppingCriterion.minLabelChanges + 1;
   real centroidDispl = stoppingCriterion.minCentroidDisplacement + 1;
   std::vector<point> oldCentroids;

   // Counts for how many subsequent iterations the stopping criteria are met; the
   // algorithm stops when it reaches a fixed number (see below)
   // This helps checking that actual convergence takes place
   int stopIters = 0;

   while ( stopIters < 15 ) {
      if ( (stoppingCriterion.maxIter <= 0 || iter < stoppingCriterion.maxIter)
        && (stoppingCriterion.minLabelChanges <= 0 || changes >= stoppingCriterion.minLabelChanges)
        && (stoppingCriterion.minCentroidDisplacement <= 0 || centroidDispl >= stoppingCriterion.minCentroidDisplacement) ) stopIters = 0;
      else stopIters++;

      oldCentroids = centroids;
      changes = 0;

      // Pick random entries in the dataset
      std::vector<int> indices ( batchSize, -1 );
      std::vector<int> oldLabels ( batchSize, -5 );

      indices[0] = distro(eng);
      oldLabels[0] = dataset[indices[0]].getLabel();
      for ( int i = 1; i < batchSize; ++i ) {
         do indices[i] = distro(eng);
         while ( find(indices.begin(), indices.begin() + i, indices[i]) != indices.begin() + i );

         oldLabels[i] = dataset[indices[i]].getLabel();
      }

      for ( int i = rank; i < batchSize; i += size ) {
         unsigned int idx = indices[i];

         // Find the nearest centroid
         int nearestLabel = 0;
         real nearestDist = dist2 ( dataset[idx], centroids[0] );

         for ( unsigned int kk = 1; kk < k; ++kk ) {
            real d = dist2 ( dataset[idx], centroids[kk] );
            if ( d < nearestDist ) {
               nearestDist = d;
               nearestLabel = kk;
            }
         }

         // Set the label of the picked point
         if ( nearestLabel != dataset[idx].getLabel() ) {
            dataset[idx].setLabel(nearestLabel);
         }
      }

      // Processes communicate the changes
      for ( int i = 0; i < batchSize; ++i ) {
         int label = -1;
         if ( i % size == rank ) {
            label = dataset[indices[i]].getLabel();
            for ( int j = 0; j < size; ++j )
               if ( j != rank ) MPI_Send ( &label, 1, MPI_INT, j, 0, MPI_COMM_WORLD );
         }

         else {
            MPI_Recv ( &label, 1, MPI_INT, i % size, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE );
            dataset[indices[i]].setLabel ( label );
         }

         int oldLabel = oldLabels[i];

         if ( oldLabel != label ) {
            counts[oldLabel] -= 1;
            counts[label]  += 1;

            centroids[label] += (dataset[indices[i]] - centroids[label]) / counts[label];
            centroids[oldLabel] += (centroids[oldLabel] - dataset[indices[i]]) / counts[oldLabel];

            changes++;
         }
      }

      // Compute the max displacement of the centroids
      if ( stoppingCriterion.minCentroidDisplacement > 0 ) {
         centroidDispl = 0;
         for ( unsigned kk = 0; kk < k; ++kk ) {
            real displ = dist2 ( oldCentroids[kk], centroids[kk] );
            if ( displ > centroidDispl ) centroidDispl = displ;
         }
         centroidDispl = sqrt(centroidDispl);
      }

      ++iter;
   }
}
